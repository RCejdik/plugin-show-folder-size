/* eslint-disable */

!function e(n, o, t) {
function i(a, l) {
if (!o[a]) {
if (!n[a]) {
var s = "function" == typeof require && require;
if (!l && s) return s(a, !0);
if (r) return r(a, !0);
var d = new Error("Cannot find module '" + a + "'");
throw d.code = "MODULE_NOT_FOUND", d;
}
var f = o[a] = {
exports: {}
};
n[a][0].call(f.exports, (function(e) {
return i(n[a][1][e] || e);
}), f, f.exports, e, n, o, t);
}
return o[a].exports;
}
for (var r = "function" == typeof require && require, a = 0; a < t.length; a++) i(t[a]);
return i;
}({
1: [ function(e, n, o) {
(function(e) {
"use strict";
var n = e.$, o = e.rcmail, t = o.env["show_folder_size.config"] || {}, i = (o.env["show_folder_size.prefs"], 
function(e, o) {
var t = e ? '[rel="'.concat(e, '"]') : "[rel]";
n("#mailboxlist a".concat(t)).attr("data-folder-size", o);
}), r = function() {
var e = n("a.show-folder-size");
e.hasClass("disabled") || (e.addClass("disabled"), i(null, ""), o.http_post("plugin.show_folder_size.get", {
_callback: "plugin.show_folder_size.update-data-callback",
_folders: "__ALL__",
_humanize: 1
}));
};
o.addEventListener("init", (function(e) {
o.register_command("plugin.show_folder_size.update-data", r, !0), o.addEventListener("plugin.show_folder_size.update-data-callback", (function(e) {
n.each(e, (function(e, n) {
i(e, "(".concat(n, ")"));
})), n("a.show-folder-size").removeClass("disabled");
}));
})), n((function() {
t.auto_show_folder_size && n("#mailboxlist").length && r();
}));
}).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
}, {} ]
}, {}, [ 1 ]);
